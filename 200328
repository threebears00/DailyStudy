

// Exception


// 프로그램에서 오류가 발생하는 상황은 두 가지

// 1. 프로그램 코드 작성 중 실수로 발생하는 컴파일 오류 (Compile Error)
// 2. 실행 중인 프로그램이 의도하지 않은 동작을 하거나 프로그램이 중지 되는 실행 오류 (Runtime Error)

// 실행 오류 중 프로그램을 잘못 구현하여 의도한 바와 다르게 실행 되어 생기는 오류를 버그(Bug)라고 한다.



// 실제 서비스를 제공하고 있는 프로그램의 경우 오류가 생기면 서비스가 중지되고, 오류가 발생하면 그 상황을 재현해서 테스트를 해야 하는데 실제 시스템이나 서비스가 운영 중인 경우에는 쉽지 않다.
// Java는 이러한 비정상 종료를 최대한 줄이기 위해 다양한 예외에 대한 처리 방법을 가지고 있다.

// 예외 처리의 목적
// 1. 프로그램이 비정상 종료되는 것을 방지하기 위함.
// 2. 예외 발생 시, 로그를 남겨 두면 예외 상황을 파악하고 버그를 수정하는데 도움이 됨.




// 오류와 예외

// 실행 오류는 크게 두 가지로 나뉜다.

// 1. JVM에서 발생하는 시스템 오류 (Error)
  // - 프로그램에서 제어할 수 없음
// 2. 예외 (Exception)
  // - 프로그램에서 제어 가능
  // - 제어가 가능하다는 점을 우리는 이용할 것
  
  
  //오류 클래스 
  
  // 오류 클래스는 모두 Throwable 클래스에서 상속을 받는다.
  // 하위 클래스 Error 클래스는 시스템에서 발생하는 오류를 다루며 프로그램에서 제어하지 않는다
  // 하위 클래스 Exception 클래스는 예외를 다룬다.
  
  
  
  
  // 예외 처리하는 법
  
  // 1. try - catch 문
  
  // 코드 형식
  
  try
   {
    
    예외가 발생할 수 있는 코드 부분
    
   }
   catch(처리 할 예외 타입 e)
   {
   
   try 블록 안에서 예외가 발생했을 때 예외를 처리하는 부분
   
   }
  
  

  
  
  











